{"_type":"export","__export_format":4,"__export_date":"2023-06-12T21:54:47.313Z","__export_source":"insomnia.desktop.app:v2023.2.2","resources":[{"_id":"req_e3924754af3d457ab1e64ba3bea84063","parentId":"fld_f1578a58369e448b8984afa26d521e9a","modified":1686606872012,"created":1686606872012,"url":"{{ _.base_url }}/tasks/{{ _.id }}","name":"Delete a task","description":"","method":"DELETE","body":{},"parameters":[],"headers":[{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872012,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_f1578a58369e448b8984afa26d521e9a","parentId":"wrk_a4a8f740a9b843059e447fc764f98a09","modified":1686606872005,"created":1686606872005,"name":"Task","description":"Endpoints of tasks","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1686606872005,"_type":"request_group"},{"_id":"wrk_a4a8f740a9b843059e447fc764f98a09","parentId":null,"modified":1685565041615,"created":1685565041615,"name":"New Document","description":"","scope":"design","_type":"workspace"},{"_id":"req_cc7c42ab17d84308abdd373b5b55220e","parentId":"fld_f1578a58369e448b8984afa26d521e9a","modified":1686606872012,"created":1686606872012,"url":"{{ _.base_url }}/tasks/{{ _.id }}","name":"Get a task","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1686606872012,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_718e6b4b15a44d47adcbeaf275b35b67","parentId":"fld_f1578a58369e448b8984afa26d521e9a","modified":1686606872012,"created":1686606872012,"url":"{{ _.base_url }}/tasks/{{ _.id }}","name":"Update a task","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n  \"profile_id\": 1,\n  \"description\": \"Kill the Night King\",\n  \"isCompleted\": 0,\n  \"character_id\": 1,\n  \"item_id\": 1\n}"},"parameters":[],"headers":[{"name":"Content-Type","disabled":false,"value":"application/json"},{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872012,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_0760a2961b274e68a891f89eb74e396b","parentId":"fld_f1578a58369e448b8984afa26d521e9a","modified":1686606872012,"created":1686606872012,"url":"{{ _.base_url }}/tasks","name":"Create a new task","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"profile_id\": 1,\n  \"description\": \"Kill the Night King\",\n  \"isCompleted\": 0,\n  \"character_id\": 1,\n  \"item_id\": 1\n}"},"parameters":[],"headers":[{"name":"Content-Type","disabled":false,"value":"application/json"},{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872012,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_7a2e05c5999f42c6adab7625d0d95705","parentId":"fld_f1578a58369e448b8984afa26d521e9a","modified":1686606872011,"created":1686606872011,"url":"{{ _.base_url }}/tasks","name":"Get all tasks","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1686606872011,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_85d128dac0134fdbbedb32cb205a1c93","parentId":"fld_599b1311d27d424897761e04e9d8441b","modified":1686606872013,"created":1686606872013,"url":"{{ _.base_url }}/users/{{ _.id }}","name":"Get user","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1686606872013,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_599b1311d27d424897761e04e9d8441b","parentId":"wrk_a4a8f740a9b843059e447fc764f98a09","modified":1686606872005,"created":1686606872005,"name":"Users","description":"Endpoints for users","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1686606872005,"_type":"request_group"},{"_id":"req_3756317b105e46209d892c8da9f69aee","parentId":"fld_599b1311d27d424897761e04e9d8441b","modified":1686606872013,"created":1686606872013,"url":"{{ _.base_url }}/users","name":"Get all users","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1686606872013,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_d191cbcd9ac444ff808b8e79aacd8fa5","parentId":"fld_599b1311d27d424897761e04e9d8441b","modified":1686606872011,"created":1686606872011,"url":"{{ _.base_url }}/register","name":"Register a new user","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"username\": \"john_doe\",\n  \"email\": \"example@email.es\",\n  \"password\": \"password123\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","disabled":false,"value":"application/json"}],"authentication":{},"metaSortKey":-1686606872011,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_9941119e5faf4633841f58a3ade71ee9","parentId":"fld_599b1311d27d424897761e04e9d8441b","modified":1686606872011,"created":1686606872011,"url":"{{ _.base_url }}/logout","name":"Logout a user","description":"","method":"POST","body":{},"parameters":[],"headers":[{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872011,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_8881d59063c54396afa80fd2ca788ab7","parentId":"fld_599b1311d27d424897761e04e9d8441b","modified":1686606872011,"created":1686606872011,"url":"{{ _.base_url }}/login","name":"Login a user","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"email\": \"example@email.es\",\n  \"password\": \"password123\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","disabled":false,"value":"application/json"},{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{},"metaSortKey":-1686606872011,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_1e289b327815412b9b9790280b8d4207","parentId":"fld_3056c9aed3704d6280ec995487694fbe","modified":1686606872013,"created":1686606872013,"url":"{{ _.base_url }}/types/{{ _.id }}","name":"Delete a type","description":"","method":"DELETE","body":{},"parameters":[],"headers":[{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872013,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_3056c9aed3704d6280ec995487694fbe","parentId":"wrk_a4a8f740a9b843059e447fc764f98a09","modified":1686606872005,"created":1686606872005,"name":"Types","description":"Endpoints of types","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1686606872005,"_type":"request_group"},{"_id":"req_d03e73fb2bba4806a8672392490759e9","parentId":"fld_3056c9aed3704d6280ec995487694fbe","modified":1686606872012,"created":1686606872012,"url":"{{ _.base_url }}/types","name":"Get all types","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1686606872012,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_a38f3c7e029e49d58029c63b3fc3a639","parentId":"fld_3056c9aed3704d6280ec995487694fbe","modified":1686606872012,"created":1686606872012,"url":"{{ _.base_url }}/types/{{ _.id }}","name":"Get a type by id","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1686606872012,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_a24f817fe923491b9e096c392cc00daa","parentId":"fld_3056c9aed3704d6280ec995487694fbe","modified":1686606872012,"created":1686606872012,"url":"{{ _.base_url }}/types","name":"Create a new type","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"name\": \"string\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","disabled":false,"value":"application/json"},{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872012,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_43e28bc76e6042ef8e19932e86ce6574","parentId":"fld_3056c9aed3704d6280ec995487694fbe","modified":1686606872012,"created":1686606872012,"url":"{{ _.base_url }}/types/{{ _.id }}","name":"Update a type","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n  \"name\": \"string\"\n}"},"parameters":[],"headers":[],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872012,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_b05af33779fd472690a719ced9afcdfe","parentId":"fld_db1ea57ee19c409189358eed0ece4e09","modified":1686606872009,"created":1686606872009,"url":"{{ _.base_url }}/favlists/{{ _.id }}","name":"Update a favorite list","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n  \"character_id\": 1,\n  \"item_id\": 1\n}"},"parameters":[],"headers":[{"name":"Content-Type","disabled":false,"value":"application/json"},{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872009,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_db1ea57ee19c409189358eed0ece4e09","parentId":"wrk_a4a8f740a9b843059e447fc764f98a09","modified":1686606872004,"created":1686606872004,"name":"Favorite Lists","description":"Endpoints for favorite lists","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1686606872004,"_type":"request_group"},{"_id":"req_4ecec44e4774434fa7cc8e0978e60225","parentId":"fld_db1ea57ee19c409189358eed0ece4e09","modified":1686606872009,"created":1686606872009,"url":"{{ _.base_url }}/favlists/{{ _.id }}","name":"Delete a favorite list","description":"","method":"DELETE","body":{},"parameters":[],"headers":[{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872009,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_ea9edddfe9f84820b7a0cfd945e507e8","parentId":"fld_db1ea57ee19c409189358eed0ece4e09","modified":1686606872008,"created":1686606872008,"url":"{{ _.base_url }}/favlists","name":"Get all favorite lists","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1686606872008,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_a7dc58c6e2694ef5a607b7a89935782b","parentId":"fld_db1ea57ee19c409189358eed0ece4e09","modified":1686606872008,"created":1686606872008,"url":"{{ _.base_url }}/favlists","name":"Create a new favorite list","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"character_id\": 1,\n  \"item_id\": 1\n}"},"parameters":[],"headers":[{"name":"Content-Type","disabled":false,"value":"application/json"},{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872008,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_76a505319a8443638cbf62f6c8f467cd","parentId":"fld_db1ea57ee19c409189358eed0ece4e09","modified":1686606872008,"created":1686606872008,"url":"{{ _.base_url }}/favlists/{{ _.id }}","name":"Get a favorite list","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1686606872008,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_be291abc3de5473ba37db054c890660a","parentId":"fld_d6b3d52bab454b7fb64f13f904eafd10","modified":1686606872009,"created":1686606872009,"url":"{{ _.base_url }}/items/{{ _.id }}","name":"Update an item","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n  \"name\": \"Sea Grapes\",\n  \"type_id\": 1,\n  \"icon\": \"sea-grapes.png\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","disabled":false,"value":"application/json"},{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872010,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_d6b3d52bab454b7fb64f13f904eafd10","parentId":"wrk_a4a8f740a9b843059e447fc764f98a09","modified":1686606872004,"created":1686606872004,"name":"Items","description":"Endpoints for items","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1686606872004,"_type":"request_group"},{"_id":"req_896b93275ede431f86ba0b83f92f17b8","parentId":"fld_d6b3d52bab454b7fb64f13f904eafd10","modified":1686606872010,"created":1686606872010,"url":"{{ _.base_url }}/items/{{ _.id }}","name":"Delete an item","description":"","method":"DELETE","body":{},"parameters":[],"headers":[{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872010,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_75d9ff347549442ab9aae8cc3529124c","parentId":"fld_d6b3d52bab454b7fb64f13f904eafd10","modified":1686606872009,"created":1686606872009,"url":"{{ _.base_url }}/items","name":"Create a new item","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"name\": \"Sea Grapes\",\n  \"type_id\": 1,\n  \"icon\": \"sea-grapes.png\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","disabled":false,"value":"application/json"},{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872009,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_68ce395cb1414c2d9d88aac61fb577f3","parentId":"fld_d6b3d52bab454b7fb64f13f904eafd10","modified":1686606872009,"created":1686606872009,"url":"{{ _.base_url }}/items/{{ _.id }}","name":"Get an item","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1686606872009,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_5b5558e340f54abb837caaf603acaeb5","parentId":"fld_d6b3d52bab454b7fb64f13f904eafd10","modified":1686606872009,"created":1686606872009,"url":"{{ _.base_url }}/items","name":"Get all items","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1686606872009,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_47657cb1c70143da9b150a90d01acb52","parentId":"fld_4fcb4949742c4fcb96fdd8337a4171a3","modified":1686606872011,"created":1686606872011,"url":"{{ _.base_url }}/seasons/{{ _.id }}","name":"Get season","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1686606872011,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_4fcb4949742c4fcb96fdd8337a4171a3","parentId":"wrk_a4a8f740a9b843059e447fc764f98a09","modified":1686606872004,"created":1686606872004,"name":"Seasons","description":"Endpoints for seasons","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1686606872004,"_type":"request_group"},{"_id":"req_2045ce56add74787986396b86ba93d88","parentId":"fld_4fcb4949742c4fcb96fdd8337a4171a3","modified":1686606872011,"created":1686606872011,"url":"{{ _.base_url }}/seasons","name":"Get all seasons","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1686606872011,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_d0874f3991a647daaae7f746d2d8ac78","parentId":"fld_3e52977f50584db1968d1287dec5152f","modified":1686606872011,"created":1686606872011,"url":"{{ _.base_url }}/profiles/{{ _.id }}","name":"Delete a profile","description":"","method":"DELETE","body":{},"parameters":[],"headers":[{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872011,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_3e52977f50584db1968d1287dec5152f","parentId":"wrk_a4a8f740a9b843059e447fc764f98a09","modified":1686606872004,"created":1686606872004,"name":"Profiles","description":"Endpoints for profiles","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1686606872004,"_type":"request_group"},{"_id":"req_a5f604ceae874cd1b07d34ac15f6aec4","parentId":"fld_3e52977f50584db1968d1287dec5152f","modified":1686606872010,"created":1686606872010,"url":"{{ _.base_url }}/profiles","name":"Create a profile","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"farmer_name\": \"John Doe\",\n  \"farm_name\": \"John's Farm\",\n  \"color\": \"#000000\",\n  \"user_id\": 1\n}"},"parameters":[],"headers":[{"name":"Content-Type","disabled":false,"value":"application/json"},{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872010,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_875eb713dae2413cb734c5013b66537e","parentId":"fld_3e52977f50584db1968d1287dec5152f","modified":1686606872010,"created":1686606872010,"url":"{{ _.base_url }}/profiles","name":"Get all profiles","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1686606872010,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_6029a2912654479a84108266caebae89","parentId":"fld_3e52977f50584db1968d1287dec5152f","modified":1686606872010,"created":1686606872010,"url":"{{ _.base_url }}/profiles/{{ _.id }}","name":"Update a profile","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n  \"farmer_name\": \"John Doe\",\n  \"farm_name\": \"John's Farm\",\n  \"color\": \"#000000\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","disabled":false,"value":"application/json"},{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872010,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_4fe6a770fada4c9484ac1a7a7d486a9e","parentId":"fld_3e52977f50584db1968d1287dec5152f","modified":1686606872010,"created":1686606872010,"url":"{{ _.base_url }}/profiles/{{ _.id }}","name":"Get a profile","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1686606872010,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_e8cf085f0c9a45d082721a8e0143e03c","parentId":"fld_9cc6c89c7b534d52a9b222e258765856","modified":1686606872008,"created":1686606872008,"url":"{{ _.base_url }}/families/{{ _.id }}","name":"Delete a family","description":"","method":"DELETE","body":{},"parameters":[],"headers":[],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872008,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_9cc6c89c7b534d52a9b222e258765856","parentId":"wrk_a4a8f740a9b843059e447fc764f98a09","modified":1686606872003,"created":1686606872003,"name":"Families","description":"Endpoints for families","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1686606872003,"_type":"request_group"},{"_id":"req_64ba53cdfefb452bab7b09ad95a6ec5c","parentId":"fld_9cc6c89c7b534d52a9b222e258765856","modified":1686606872008,"created":1686606872008,"url":"{{ _.base_url }}/families/{{ _.id }}","name":"Update a family","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n  \"character_id\": 1,\n  \"familiar_id\": 2,\n  \"relationship\": \"Mother\"\n}"},"parameters":[],"headers":[],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872008,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_fe05eb3f888244519d4febc5ecb3a98d","parentId":"fld_9cc6c89c7b534d52a9b222e258765856","modified":1686606872007,"created":1686606872007,"url":"{{ _.base_url }}/families","name":"Create a new family","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"character_id\": 1,\n  \"familiar_id\": 2,\n  \"relationship\": \"Mother\"\n}"},"parameters":[],"headers":[],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872007,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_f16ebab2408a4f6890362fd561d494ff","parentId":"fld_9cc6c89c7b534d52a9b222e258765856","modified":1686606872007,"created":1686606872007,"url":"{{ _.base_url }}/families","name":"Get all families","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1686606872007,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_a8b14c53b9f446f5b4519501842e3b35","parentId":"fld_9cc6c89c7b534d52a9b222e258765856","modified":1686606872007,"created":1686606872007,"url":"{{ _.base_url }}/families/{{ _.id }}","name":"Get a family","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1686606872007,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_fb14e858ef604a4e83ce7692c9068064","parentId":"fld_08c67011ada044e68e6afbafbc00ba03","modified":1686606872007,"created":1686606872007,"url":"{{ _.base_url }}/characters/{{ _.id }}","name":"Update a character","description":"","method":"PUT","body":{"mimeType":"application/json","text":"{\n  \"name\": \"John Doe\",\n  \"birthday\": 1,\n  \"season_id\": 1,\n  \"gender\": \"Female\",\n  \"occupation\": \"Doctor\",\n  \"isRomanceable\": 1,\n  \"icon\": \"image.jpg\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","disabled":false,"value":"application/json"},{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872007,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_08c67011ada044e68e6afbafbc00ba03","parentId":"wrk_a4a8f740a9b843059e447fc764f98a09","modified":1686606872002,"created":1686606872002,"name":"Characters","description":"Endpoints for characters","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1686606872002,"_type":"request_group"},{"_id":"req_e6c04cbe539a43db8186c9a4c9696b2f","parentId":"fld_08c67011ada044e68e6afbafbc00ba03","modified":1686606872007,"created":1686606872007,"url":"{{ _.base_url }}/characters/{{ _.id }}","name":"Delete a character","description":"","method":"DELETE","body":{},"parameters":[],"headers":[{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872007,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_80662c7a079d44f186ebc8abf1911d16","parentId":"fld_08c67011ada044e68e6afbafbc00ba03","modified":1686606872006,"created":1686606872006,"url":"{{ _.base_url }}/characters/{{ _.id }}","name":"Get a character","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1686606872006,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_47039e101bd740a7b172f80a38fd6f99","parentId":"fld_08c67011ada044e68e6afbafbc00ba03","modified":1686606872006,"created":1686606872006,"url":"{{ _.base_url }}/characters","name":"Create a new character","description":"","method":"POST","body":{"mimeType":"application/json","text":"{\n  \"name\": \"John Doe\",\n  \"birthday\": 1,\n  \"season_id\": 1,\n  \"gender\": \"Female\",\n  \"occupation\": \"Doctor\",\n  \"isRomanceable\": 1,\n  \"icon\": \"image.jpg\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","disabled":false,"value":"application/json"},{"name":"Accept","disabled":false,"value":"application/json"}],"authentication":{"type":"bearer","token":"{{ _.bearerToken }}","prefix":""},"metaSortKey":-1686606872006,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_285f8e0dd35146adbd4f045e786168e9","parentId":"fld_08c67011ada044e68e6afbafbc00ba03","modified":1686606872005,"created":1686606872005,"url":"{{ _.base_url }}/characters","name":"Get all characters","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1686606872005,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_16cf713bdd864950ef8be91cacc146d5eac0cf51","parentId":"wrk_a4a8f740a9b843059e447fc764f98a09","modified":1686333519929,"created":1685565041617,"name":"Base Environment","data":{},"dataPropertyOrder":{},"color":null,"isPrivate":false,"metaSortKey":1685565041617,"_type":"environment"},{"_id":"jar_16cf713bdd864950ef8be91cacc146d5eac0cf51","parentId":"wrk_a4a8f740a9b843059e447fc764f98a09","modified":1685569323922,"created":1685565041617,"name":"Default Jar","cookies":[{"key":"XSRF-TOKEN","value":"eyJpdiI6InVqMWZyek1yZG55VFdpTmNTNXB2T1E9PSIsInZhbHVlIjoiKzB6NHNrMHloR2JxSDRFbUdUd2NUU3oyQzZaalpDQ3RveW9SYVFjcjVWU0ZNT0Z3N0dPRUVZeTZDMjN4NHV2VEZQWjRHcklmekFTTEJLZXdYNDJOVFZYQmVObE8rTDJDLy91OGxubTRZdnltWUFRWHE3OHBHS1VVZ25OTVEzNGsiLCJtYWMiOiIxYWY3ZTNhNWI2ZWE2NzFmZGU4YjliMGRhOWJjODc5MzRmZDc3NTU5ZWRjMGM2MjA0MTVhMDZhNjc5NmIzNGMyIiwidGFnIjoiIn0%3D","expires":"2023-05-31T23:42:03.000Z","maxAge":7200,"domain":"localhost","path":"/","extensions":["samesite=lax"],"hostOnly":true,"creation":"2023-05-31T21:36:53.000Z","lastAccessed":"2023-05-31T21:42:03.922Z","id":"22375923037847123"},{"key":"laravel_session","value":"eyJpdiI6InR0NVJVc3RJcXlhUStaWkNUcG9pVHc9PSIsInZhbHVlIjoibDV1TjAzZWVrQU9OeDRqYnU2UklicDdpTEFEMFlFWVovU01yeTcxL3lyWVNGSFZlbk5oMDUxbncxUHhhMnVZWTZBbTg1UE1sWHdraXJFeFBEbTNpb24xU0hSQ1BKWkNNL3dzT2d6Z0dqdXFPY1pZdlZ6bm8xVldyZ0pSWk16NEkiLCJtYWMiOiIwOWRlZDBiZmNlYWUyNTFhNzZlOTIxZmUzZTNiNTU3YTNkMDQyN2Q2ZjFiYmE0NTVkODg2MWQxOGFhMGQzNzFiIiwidGFnIjoiIn0%3D","expires":"2023-05-31T23:42:03.000Z","maxAge":7200,"domain":"localhost","path":"/","httpOnly":true,"extensions":["samesite=lax"],"hostOnly":true,"creation":"2023-05-31T21:36:53.000Z","lastAccessed":"2023-05-31T21:42:03.922Z","id":"0900463476566773"}],"_type":"cookie_jar"},{"_id":"spc_4f9aaee689694f15ba9f723bacd61a2f","parentId":"wrk_a4a8f740a9b843059e447fc764f98a09","modified":1686606698827,"created":1685950678812,"fileName":"CoralCompanionAPI","contents":"{\n    \"openapi\": \"3.0.0\",\n    \"info\": {\n        \"title\": \"Coral Companion API Documentation\",\n        \"description\": \"Documentation for the API used in the Coral Companion app\",\n        \"contact\": {\n            \"name\": \"Paula Rumeu\",\n            \"email\": \"paururo08@hotmail.com\"\n        },\n        \"license\": {\n            \"name\": \"Creative Commons Attribution Share Alike 4.0 International\",\n            \"url\": \"https://creativecommons.org/licenses/by-sa/4.0/\"\n        },\n        \"version\": \"1.0.0\",\n        \"x-logo\": {\n            \"url\": \"https://github.com/salem404/coral-companion/raw/master/frontend/src/assets/img/logo-color.svg\"\n        }\n    },\n    \"servers\": [\n        {\n            \"url\": \"http://localhost/api\",\n            \"description\": \"Localhost\"\n        },\n        {\n            \"url\": \"https://coral-companion.railway.com/api\",\n            \"description\": \"Railway\"\n        }\n    ],\n    \"paths\": {\n        \"/characters\": {\n            \"get\": {\n                \"tags\": [\n                    \"Characters\"\n                ],\n                \"summary\": \"Get all characters\",\n                \"description\": \"Get all characters from the database\",\n                \"operationId\": \"062f3e5f302f1c8c029712b6dc62ad81\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Returns all characters\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/Character\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Characters don't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"No characters found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"post\": {\n                \"tags\": [\n                    \"Characters\"\n                ],\n                \"summary\": \"Create a new character\",\n                \"description\": \"Create a new character using the data provided in the request body. (Admin only)\",\n                \"operationId\": \"b84959a16c4034a36d49d2de19fb76d6\",\n                \"parameters\": [\n                    {\n                        \"name\": \"Content-Type\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    },\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"$ref\": \"#/components/requestBodies/CharacterCreate\"\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Success: Character created\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Character created successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request: Data validation error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"The name field is required\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized. Only admins can create characters\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to create a character\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            }\n        },\n        \"/characters/{id}\": {\n            \"get\": {\n                \"tags\": [\n                    \"Characters\"\n                ],\n                \"summary\": \"Get a character\",\n                \"description\": \"Get a character by ID sent in the URL from the database\",\n                \"operationId\": \"1db5dfb3034a9dce2f29410306c43565\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of character to return\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Returns the character\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Character\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Character doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Character with id 1 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"put\": {\n                \"tags\": [\n                    \"Characters\"\n                ],\n                \"summary\": \"Update a character\",\n                \"description\": \"Update a character by ID in the URL and data provided in the request body. (Admin only)\",\n                \"operationId\": \"758175665123747d5b16cf07baa74966\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of character to update\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Content-Type\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    },\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"$ref\": \"#/components/requestBodies/CharacterUpdate\"\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Character updated\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Character updated successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad Request: Data validation error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"The name field is required\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized: Only admins can update characters\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to update a character\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Character doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Character with id 1 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"Characters\"\n                ],\n                \"summary\": \"Delete a character\",\n                \"description\": \"Delete a character by ID sent in the URL (Admin only)\",\n                \"operationId\": \"1f0a8733db435da1923b66d501b6eca9\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of the character to delete\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Character deleted successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Character deleted successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized: Only admins can delete characters\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to delete a character\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Character doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Character with id 1 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            }\n        },\n        \"/families\": {\n            \"get\": {\n                \"tags\": [\n                    \"Families\"\n                ],\n                \"summary\": \"Get all families\",\n                \"description\": \"Get all families from the database\",\n                \"operationId\": \"e1f361ab32ef6173d6e698dfba7972b5\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Returns all families\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/Family\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Families don't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"No families found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"post\": {\n                \"tags\": [\n                    \"Families\"\n                ],\n                \"summary\": \"Create a new family\",\n                \"description\": \"Create a new family using the data provided in the request body. (Admin only)\",\n                \"operationId\": \"d54bac5b85ad80fc410c562776a7d90b\",\n                \"requestBody\": {\n                    \"$ref\": \"#/components/requestBodies/FamilyCreate\"\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Success: Family created\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Family created successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request: Data validation error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"The character_id field is required\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized: Only admins can create a family\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to create a family\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            }\n        },\n        \"/families/{id}\": {\n            \"get\": {\n                \"tags\": [\n                    \"Families\"\n                ],\n                \"summary\": \"Get a family\",\n                \"description\": \"Get a family by ID in the URL\",\n                \"operationId\": \"a80062fd4c781deda21728cea1e09835\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of the family to return\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Returns the family\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Family\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Family doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Family with id 1 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"put\": {\n                \"tags\": [\n                    \"Families\"\n                ],\n                \"summary\": \"Update a family\",\n                \"description\": \"Update a family by ID in the URL and data provided in the request body. (Admin only)\",\n                \"operationId\": \"7889218d452c1ae1d0fd363208d71857\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of the family to update\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"$ref\": \"#/components/requestBodies/FamilyUpdate\"\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Family updated\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Family updated successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad Request: Data validation error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"The relationship field is required\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized: Only admins can update a family\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to update a family\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Family doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Family with id 1 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"Families\"\n                ],\n                \"summary\": \"Delete a family\",\n                \"description\": \"Delete a family by ID sent in the URL. (Admin only)\",\n                \"operationId\": \"7e1ed5caa6e25fa4e8cfe5e1bf020bd0\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of the family to delete\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Family deleted successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Family with id 1 deleted successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized: Only admins can delete a family\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to delete a family\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Family doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Family with id 1 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            }\n        },\n        \"/favlists\": {\n            \"get\": {\n                \"tags\": [\n                    \"Favorite Lists\"\n                ],\n                \"summary\": \"Get all favorite lists\",\n                \"description\": \"Get all favorite lists from the database\",\n                \"operationId\": \"f4f6cefcf140c9f957dcb0fcb92d2f56\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Returns all favorite lists\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/FavList\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"No favorite lists found\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"No favorite lists found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"post\": {\n                \"tags\": [\n                    \"Favorite Lists\"\n                ],\n                \"summary\": \"Create a new favorite list\",\n                \"description\": \"Create a new favorite list using the data provided in the request body. (Admin only)\",\n                \"operationId\": \"222781dac05a4b259ffb0b9dfbe96d7e\",\n                \"parameters\": [\n                    {\n                        \"name\": \"Content-Type\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    },\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"$ref\": \"#/components/requestBodies/FavListCreate\"\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Sucess: Favorite list created\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Favorite list created successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request: Data validation error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"The character_id field is required\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized. Only admins can create new favorite lists\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to create a favorite list\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            }\n        },\n        \"/favlists/{id}\": {\n            \"get\": {\n                \"tags\": [\n                    \"Favorite Lists\"\n                ],\n                \"summary\": \"Get a favorite list\",\n                \"description\": \"Get a favorite lists by the ID in the URL\",\n                \"operationId\": \"05c452e213c352c8ee485c32f89ee26d\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of the favorite list\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Returns the favorite list\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/FavList\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not Found: Favorite list doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Favorite list with id 1 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"put\": {\n                \"tags\": [\n                    \"Favorite Lists\"\n                ],\n                \"summary\": \"Update a favorite list\",\n                \"description\": \"Update a favorite list by ID in the URL and data provided in the request body. (Admin only)\",\n                \"operationId\": \"d373b8372aa5a27ae7fbdab031f22238\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of the favorite list\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Content-Type\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    },\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"$ref\": \"#/components/requestBodies/FavListUpdate\"\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Favorite list updated\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Favorite list updated successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad Request: Data validation error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"The name field is required\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to update a favorite list\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Favorite list not found\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Favorite list with id 2 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"Favorite Lists\"\n                ],\n                \"summary\": \"Delete a favorite list\",\n                \"description\": \"Deletes a favorite list by ID in the URL. (Admin only)\",\n                \"operationId\": \"f1ad3e7795357423e2fb70705b4ef030\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of the favorite list to be deleted\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Favorite list deleted\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Favorite list deleted successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized: Only admins can delete favorite lists\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to delete a favorite list\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Favorite list doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Favorite list with id 2 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            }\n        },\n        \"/items\": {\n            \"get\": {\n                \"tags\": [\n                    \"Items\"\n                ],\n                \"summary\": \"Get all items\",\n                \"description\": \"Get all items from the database\",\n                \"operationId\": \"f3c786df279db88370a791ca6978bd29\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Return all items\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/Item\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Items don't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"No items found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"post\": {\n                \"tags\": [\n                    \"Items\"\n                ],\n                \"summary\": \"Create a new item\",\n                \"description\": \"Create a new item using the data provided in the request body. (Admin only)\",\n                \"operationId\": \"38910978a79a2a2fe1af9fb02e683d81\",\n                \"parameters\": [\n                    {\n                        \"name\": \"Content-Type\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    },\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"$ref\": \"#/components/requestBodies/ItemCreate\"\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Success: Item created successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Item created\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad Request: Data validation error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"The name field is required\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized: Only admins can create items\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to create an item\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            }\n        },\n        \"/items/{id}\": {\n            \"get\": {\n                \"tags\": [\n                    \"Items\"\n                ],\n                \"summary\": \"Get an item\",\n                \"description\": \"Get an item using the id provided in the request URL\",\n                \"operationId\": \"fc4b4ba3d04f59c12ba55019510f3be2\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of item to return\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Return an item\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Item\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Item doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Item with id 1 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"put\": {\n                \"tags\": [\n                    \"Items\"\n                ],\n                \"summary\": \"Update an item\",\n                \"description\": \"Update an item by ID in the URL and data provided in the request body. (Admin only)\",\n                \"operationId\": \"5bee0c1299b966d54c3d44e6fc41b7df\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of item to update\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Content-Type\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    },\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"$ref\": \"#/components/requestBodies/ItemUpdate\"\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Item updated successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Item updated\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad Request: Data validation error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"The name field is required\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized: Only admins can update items\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to update an item\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Item doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Item with id 1 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"Items\"\n                ],\n                \"summary\": \"Delete an item\",\n                \"description\": \"Delete an item by ID sent in the URL. (Admin only)\",\n                \"operationId\": \"b2f163bf1735121598620e780afbe870\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of item to delete\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Item deleted successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Item deleted\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized: Only admins can delete items\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to delete an item\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Item doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Item with id 1 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            }\n        },\n        \"/profiles\": {\n            \"get\": {\n                \"tags\": [\n                    \"Profiles\"\n                ],\n                \"summary\": \"Get all profiles\",\n                \"description\": \"Get all profiles from the database\",\n                \"operationId\": \"1afd045c87391eb70de9615a4e03cf91\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Return all profiles\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/Profile\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"No profiles found\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"No profiles found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"post\": {\n                \"tags\": [\n                    \"Profiles\"\n                ],\n                \"summary\": \"Create a profile\",\n                \"description\": \"Create a new profile using the data provided in the request body. The user must be an admin to create a profile for other users. An user can create a profile for themselves (user_id not required).\",\n                \"operationId\": \"14ca107420d028924052574e1d385c1c\",\n                \"parameters\": [\n                    {\n                        \"name\": \"Content-Type\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    },\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"$ref\": \"#/components/requestBodies/ProfileCreate\"\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Success: A profile created\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Profile created successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request: The request you sent was invalid\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"farmer_name, farm_name and color are required\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized: Only admins or the user themselves can create a profile\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to create a profile\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            }\n        },\n        \"/profiles/{id}\": {\n            \"get\": {\n                \"tags\": [\n                    \"Profiles\"\n                ],\n                \"summary\": \"Get a profile\",\n                \"description\": \"Get a profile by ID in the URL\",\n                \"operationId\": \"9aafb9b7a4b31cb41fa18c41e18dd6e0\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of profile\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Returns a profile\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Profile\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not Found: Profile doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Profile with id 4 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"put\": {\n                \"tags\": [\n                    \"Profiles\"\n                ],\n                \"summary\": \"Update a profile\",\n                \"description\": \"Update a profile by ID in the URL and data provided in the request body. Admins can update any profile, users can only update their own profiles\",\n                \"operationId\": \"fad658ba45fe7dab378d24861bf22f4c\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of profile\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Content-Type\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    },\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"$ref\": \"#/components/requestBodies/ProfileUpdate\"\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Profile has been updated successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Profile updated successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad Request: Data validation error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"The farmer name field is required\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized: Only admins or the user who created the profile can update it\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to update this profile\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not Found: Profile doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Profile with id 4 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"Profiles\"\n                ],\n                \"summary\": \"Delete a profile\",\n                \"description\": \"Delete a profile by ID in the URL. Admins can delete any profile, users can only delete their own profiles\",\n                \"operationId\": \"b3f355620753ead8a083666cdd71362c\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of profile to delete\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Profile deleted successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Profile deleted successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized: Only admins or the user who created the profile can delete it\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to delete this profile\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not Found: Profile doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Profile with id 4 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            }\n        },\n        \"/register\": {\n            \"post\": {\n                \"tags\": [\n                    \"Users\"\n                ],\n                \"summary\": \"Register a new user\",\n                \"description\": \"Register a new user.\",\n                \"operationId\": \"cffdb69e5b176093c7abd7ad6a9ab6e5\",\n                \"parameters\": [\n                    {\n                        \"name\": \"Content-Type\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"$ref\": \"#/components/requestBodies/UserRegister\"\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Success: User created\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"User created successfully\"\n                                        },\n                                        \"token\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"2|3f4e5d6c7b8a9z0x\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad Request: Validation errors\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"errors\": {\n                                            \"type\": \"object\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/login\": {\n            \"post\": {\n                \"tags\": [\n                    \"Users\"\n                ],\n                \"summary\": \"Login a user\",\n                \"description\": \"Login a user.\",\n                \"operationId\": \"999b75abea65a7e2cab3f78195ab68cf\",\n                \"parameters\": [\n                    {\n                        \"name\": \"Content-Type\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    },\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"$ref\": \"#/components/requestBodies/UserLogin\"\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: User logged in\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"User logged in successfully\"\n                                        },\n                                        \"token\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"2|3f4e5d6c7b8a9z0x\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad Request: Validation errors\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"errors\": {\n                                            \"type\": \"object\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Invalid login details\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Invalid login details\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/logout\": {\n            \"post\": {\n                \"tags\": [\n                    \"Users\"\n                ],\n                \"summary\": \"Logout a user\",\n                \"description\": \"Logout a user.\",\n                \"operationId\": \"df53fbe1b232f646afb1bc32ecba141f\",\n                \"parameters\": [\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: User logged out\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"User logged out successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthenticated: The user must be logged in to log out\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Unauthenticated\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            }\n        },\n        \"/seasons\": {\n            \"get\": {\n                \"tags\": [\n                    \"Seasons\"\n                ],\n                \"summary\": \"Get all seasons\",\n                \"description\": \"Returns all seasons from the database\",\n                \"operationId\": \"0397b64587ed051b343a1c883d8411ff\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Returns all seasons\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/Season\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Seasons don't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"No seasons found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/seasons/{id}\": {\n            \"get\": {\n                \"tags\": [\n                    \"Seasons\"\n                ],\n                \"summary\": \"Get season\",\n                \"description\": \"Get a season by ID in the URL\",\n                \"operationId\": \"e415eae67ff4978d5797e9fa6c928ca6\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of season to return\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\",\n                            \"example\": 1\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Returns season\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Season\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Season doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Season not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/tasks\": {\n            \"get\": {\n                \"tags\": [\n                    \"Task\"\n                ],\n                \"summary\": \"Get all tasks\",\n                \"description\": \"Get all tasks from the database\",\n                \"operationId\": \"b132a5f14cb1c055f33ef7d94af79438\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Returns all tasks\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/Task\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Tasks don't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"No tasks found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"post\": {\n                \"tags\": [\n                    \"Task\"\n                ],\n                \"summary\": \"Create a new task\",\n                \"description\": \"Create a new task using the data provided in the request body. (Admins can create tasks for other users)\",\n                \"operationId\": \"4dbf3e760f46296529098c64a16b6549\",\n                \"parameters\": [\n                    {\n                        \"name\": \"Content-Type\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    },\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"$ref\": \"#/components/requestBodies/TaskCreate\"\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Success: Task created\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Task created successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request: Data validation error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"The description field is required\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized: Tasks can only be created by admins or the user themself\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to create a task\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            }\n        },\n        \"/tasks/{id}\": {\n            \"get\": {\n                \"tags\": [\n                    \"Task\"\n                ],\n                \"summary\": \"Get a task\",\n                \"description\": \"Get a task by ID sent in the URL from the database\",\n                \"operationId\": \"42e07aa4bda2700f1c22a049e01cd7a0\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of task to return\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Returns a task\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Task\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Task doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Task not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"put\": {\n                \"tags\": [\n                    \"Task\"\n                ],\n                \"summary\": \"Update a task\",\n                \"description\": \"Update a task by ID sent in the URL and data provided in the request body. Only the user who created the task and admins can update it.\",\n                \"operationId\": \"caa557a9905d8dc7f6b329db3d4b6a98\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of task to update\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Content-Type\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    },\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"$ref\": \"#/components/requestBodies/TaskUpdate\"\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Task updated\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Task updated successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request: Data validation error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"The isCompleted field must be 0 or 1\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized: Only the user who created the task and admins can update it\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to update this task\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Task doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Task not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"Task\"\n                ],\n                \"summary\": \"Delete a task\",\n                \"description\": \"Delete a task by ID sent in the URL. Only the user who created the task and admins can delete it.\",\n                \"operationId\": \"6f5697c2a7171f21f3455412a4ea996d\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of task to delete\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Task deleted\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Task deleted successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"You are not authorized to delete this task\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to delete this task\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Task not found\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Task with id 1 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            }\n        },\n        \"/types\": {\n            \"get\": {\n                \"tags\": [\n                    \"Types\"\n                ],\n                \"summary\": \"Get all types\",\n                \"description\": \"Get all types from the database\",\n                \"operationId\": \"4644f0d196eea1f70f5a4d6f84d905d2\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Returns all types\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/Type\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Characters don't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"No characters found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"post\": {\n                \"tags\": [\n                    \"Types\"\n                ],\n                \"summary\": \"Create a new type\",\n                \"description\": \"Create a new type using the data provided in the request body.\",\n                \"operationId\": \"e80661fcbc076451294c631d1c39e693\",\n                \"parameters\": [\n                    {\n                        \"name\": \"Content-Type\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    },\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"$ref\": \"#/components/requestBodies/Type\"\n                },\n                \"responses\": {\n                    \"201\": {\n                        \"description\": \"Success: Type created\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Type created successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request: Data validation error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"The name field is required\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized. Only admins can create types\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to create a type\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            }\n        },\n        \"/types/{id}\": {\n            \"get\": {\n                \"tags\": [\n                    \"Types\"\n                ],\n                \"summary\": \"Get a type by id\",\n                \"description\": \"Get a type by ID sent in the URL from the database\",\n                \"operationId\": \"83d01d2bbc8314c51263b6d3f336456f\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"Type id\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Returns the type\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/Type\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Type doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Type with id 1 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"put\": {\n                \"tags\": [\n                    \"Types\"\n                ],\n                \"summary\": \"Update a type\",\n                \"description\": \"Update a type by ID in the URL and data provided in the request body. (Admin only)\",\n                \"operationId\": \"e7e536492cc11bf2f8ad953b01101c28\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of type to update\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    }\n                ],\n                \"requestBody\": {\n                    \"$ref\": \"#/components/requestBodies/Type\"\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Type updated\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Type updated successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad Request: Data validation error\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"The name field is required\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized: Only admins can update types\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to update a type\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Type doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Type with id 1 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            },\n            \"delete\": {\n                \"tags\": [\n                    \"Types\"\n                ],\n                \"summary\": \"Delete a type\",\n                \"description\": \"Delete a type by ID sent in the URL (Admin only)\",\n                \"operationId\": \"ea424d1117d38228c4d01f64402459b4\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of the type to delete\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\"\n                        }\n                    },\n                    {\n                        \"name\": \"Accept\",\n                        \"in\": \"header\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"string\",\n                            \"default\": \"application/json\"\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: type deleted successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Type deleted successfully\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"401\": {\n                        \"description\": \"Unauthorized: Only admins can delete types\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"You are not authorized to delete a type\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: Type doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"Type with id 1 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                },\n                \"security\": [\n                    {\n                        \"sanctum\": []\n                    }\n                ]\n            }\n        },\n        \"/users\": {\n            \"get\": {\n                \"tags\": [\n                    \"Users\"\n                ],\n                \"summary\": \"Get all users\",\n                \"description\": \"Returns all users from the database\",\n                \"operationId\": \"78451c34a9c0e7701cd034b2ff700027\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Returns all users\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"$ref\": \"#/components/schemas/User\"\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"No users found\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"No users found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/users/{id}\": {\n            \"get\": {\n                \"tags\": [\n                    \"Users\"\n                ],\n                \"summary\": \"Get user\",\n                \"description\": \"Get an user by ID sent in the URL from the database\",\n                \"operationId\": \"4b3b292dd9efff069b7e7b5575f80560\",\n                \"parameters\": [\n                    {\n                        \"name\": \"id\",\n                        \"in\": \"path\",\n                        \"description\": \"ID of user to return\",\n                        \"required\": true,\n                        \"schema\": {\n                            \"type\": \"integer\",\n                            \"minimum\": 1,\n                            \"example\": 1\n                        }\n                    }\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Success: Returns the user\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/User\"\n                                }\n                            }\n                        }\n                    },\n                    \"404\": {\n                        \"description\": \"Not found: User doesn't exist\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"properties\": {\n                                        \"message\": {\n                                            \"type\": \"string\",\n                                            \"example\": \"User with id 1 not found\"\n                                        }\n                                    },\n                                    \"type\": \"object\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"Character\": {\n                \"required\": [\n                    \"id\",\n                    \"name\",\n                    \"isRomanceable\",\n                    \"icon\"\n                ],\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"integer\",\n                        \"minimum\": 1,\n                        \"example\": 1\n                    },\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"example\": \"John Doe\"\n                    },\n                    \"birthday\": {\n                        \"type\": \"integer\",\n                        \"maximum\": 28,\n                        \"minimum\": 1,\n                        \"example\": 1\n                    },\n                    \"season_id\": {\n                        \"$ref\": \"#/components/schemas/Season\"\n                    },\n                    \"gender\": {\n                        \"type\": \"string\",\n                        \"example\": \"Female\"\n                    },\n                    \"occupation\": {\n                        \"type\": \"string\",\n                        \"example\": \"Doctor\"\n                    },\n                    \"isRomanceable\": {\n                        \"type\": \"integer\",\n                        \"example\": 1\n                    },\n                    \"icon\": {\n                        \"type\": \"string\",\n                        \"example\": \"image.jpg\"\n                    },\n                    \"created_at\": {\n                        \"type\": \"string\",\n                        \"format\": \"date-time\",\n                        \"example\": \"2021-01-01 00:00:00\"\n                    },\n                    \"updated_at\": {\n                        \"type\": \"string\",\n                        \"format\": \"date-time\",\n                        \"example\": \"2021-01-01 00:00:00\"\n                    }\n                },\n                \"type\": \"object\"\n            },\n            \"Family\": {\n                \"required\": [\n                    \"character_id\",\n                    \"familiar_id\",\n                    \"relationship\"\n                ],\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"integer\",\n                        \"example\": 1\n                    },\n                    \"character_id\": {\n                        \"$ref\": \"#/components/schemas/Character\"\n                    },\n                    \"familiar_id\": {\n                        \"$ref\": \"#/components/schemas/Character\"\n                    },\n                    \"relationship\": {\n                        \"type\": \"string\",\n                        \"example\": \"Mother\"\n                    },\n                    \"created_at\": {\n                        \"type\": \"string\",\n                        \"format\": \"date-time\",\n                        \"example\": \"2021-03-24 14:48:00\"\n                    },\n                    \"updated_at\": {\n                        \"type\": \"string\",\n                        \"format\": \"date-time\",\n                        \"example\": \"2021-03-24 14:48:00\"\n                    }\n                },\n                \"type\": \"object\"\n            },\n            \"FavList\": {\n                \"required\": [\n                    \"id\",\n                    \"character_id\",\n                    \"item_id\"\n                ],\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"integer\",\n                        \"example\": 1\n                    },\n                    \"character_id\": {\n                        \"$ref\": \"#/components/schemas/Character\"\n                    },\n                    \"item_id\": {\n                        \"$ref\": \"#/components/schemas/Item\"\n                    },\n                    \"created_at\": {\n                        \"type\": \"string\",\n                        \"format\": \"date-time\",\n                        \"example\": \"2021-03-26T13:26:14.000000Z\"\n                    },\n                    \"updated_at\": {\n                        \"type\": \"string\",\n                        \"format\": \"date-time\",\n                        \"example\": \"2021-03-26T13:26:14.000000Z\"\n                    }\n                },\n                \"type\": \"object\"\n            },\n            \"Item\": {\n                \"required\": [\n                    \"name\",\n                    \"id\",\n                    \"icon\"\n                ],\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"integer\",\n                        \"example\": 1\n                    },\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"example\": \"Sea Grapes\"\n                    },\n                    \"type_id\": {\n                        \"$ref\": \"#/components/schemas/Type\"\n                    },\n                    \"icon\": {\n                        \"type\": \"string\",\n                        \"example\": \"sea-grapes.png\"\n                    },\n                    \"created_at\": {\n                        \"type\": \"string\",\n                        \"format\": \"date-time\",\n                        \"example\": \"2021-03-10T17:26:00.000000Z\"\n                    },\n                    \"updated_at\": {\n                        \"type\": \"string\",\n                        \"format\": \"date-time\",\n                        \"example\": \"2021-03-10T17:26:00.000000Z\"\n                    }\n                },\n                \"type\": \"object\"\n            },\n            \"Profile\": {\n                \"required\": [\n                    \"id\",\n                    \"farmer_name\",\n                    \"farm_name\",\n                    \"color\",\n                    \"user_id\"\n                ],\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"integer\",\n                        \"example\": 4\n                    },\n                    \"farmer_name\": {\n                        \"type\": \"string\",\n                        \"example\": \"John Doe\"\n                    },\n                    \"farm_name\": {\n                        \"type\": \"string\",\n                        \"example\": \"John's Farm\"\n                    },\n                    \"color\": {\n                        \"type\": \"string\",\n                        \"example\": \"#000000\"\n                    },\n                    \"user_id\": {\n                        \"$ref\": \"#/components/schemas/User\"\n                    },\n                    \"created_at\": {\n                        \"type\": \"string\",\n                        \"format\": \"date-time\",\n                        \"example\": \"2021-03-25T20:29:48.000000Z\"\n                    },\n                    \"updated_at\": {\n                        \"type\": \"string\",\n                        \"format\": \"date-time\",\n                        \"example\": \"2021-03-25T20:29:48.000000Z\"\n                    }\n                },\n                \"type\": \"object\"\n            },\n            \"Season\": {\n                \"required\": [\n                    \"id\",\n                    \"name\"\n                ],\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"integer\",\n                        \"maximum\": 4,\n                        \"minimum\": 1,\n                        \"example\": 4\n                    },\n                    \"name\": {\n                        \"type\": \"string\",\n                        \"example\": \"Winter\"\n                    }\n                },\n                \"type\": \"object\"\n            },\n            \"Task\": {\n                \"required\": [\n                    \"profile_id\",\n                    \"description\",\n                    \"isCompleted\"\n                ],\n                \"properties\": {\n                    \"profile_id\": {\n                        \"$ref\": \"#/components/schemas/Profile\"\n                    },\n                    \"description\": {\n                        \"description\": \"The description of the task\",\n                        \"type\": \"string\",\n                        \"example\": \"Kill the Night King\"\n                    },\n                    \"isCompleted\": {\n                        \"description\": \"The status of the task\",\n                        \"type\": \"integer\",\n                        \"example\": 0\n                    },\n                    \"character_id\": {\n                        \"$ref\": \"#/components/schemas/Character\"\n                    },\n                    \"item_id\": {\n                        \"$ref\": \"#/components/schemas/Item\"\n                    },\n                    \"created_at\": {\n                        \"type\": \"string\",\n                        \"format\": \"date-time\",\n                        \"example\": \"2021-03-25 12:00:00\"\n                    },\n                    \"updated_at\": {\n                        \"type\": \"string\",\n                        \"format\": \"date-time\",\n                        \"example\": \"2021-03-25 12:00:00\"\n                    }\n                },\n                \"type\": \"object\"\n            },\n            \"Type\": {\n                \"required\": [\n                    \"name\"\n                ],\n                \"properties\": {\n                    \"name\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"type\": \"object\"\n            },\n            \"User\": {\n                \"required\": [\n                    \"id\",\n                    \"username\",\n                    \"email\",\n                    \"password\"\n                ],\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"integer\",\n                        \"minimum\": 1,\n                        \"example\": 1\n                    },\n                    \"username\": {\n                        \"type\": \"string\",\n                        \"example\": \"john_doe\"\n                    },\n                    \"email\": {\n                        \"type\": \"string\",\n                        \"format\": \"email\",\n                        \"example\": \"example@email.es\"\n                    },\n                    \"password\": {\n                        \"type\": \"string\",\n                        \"format\": \"password\",\n                        \"example\": \"password123\"\n                    }\n                },\n                \"type\": \"object\"\n            }\n        },\n        \"requestBodies\": {\n            \"CharacterCreate\": {\n                \"required\": true,\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"required\": [\n                                \"name\",\n                                \"isRomanceable\",\n                                \"icon\"\n                            ],\n                            \"properties\": {\n                                \"name\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"John Doe\"\n                                },\n                                \"birthday\": {\n                                    \"type\": \"integer\",\n                                    \"maximum\": 28,\n                                    \"minimum\": 1,\n                                    \"example\": 1\n                                },\n                                \"season_id\": {\n                                    \"type\": \"integer\",\n                                    \"maximum\": 4,\n                                    \"minimum\": 1,\n                                    \"example\": 1\n                                },\n                                \"gender\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"Female\"\n                                },\n                                \"occupation\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"Doctor\"\n                                },\n                                \"isRomanceable\": {\n                                    \"type\": \"integer\",\n                                    \"maximum\": 1,\n                                    \"minimum\": 0,\n                                    \"example\": 1\n                                },\n                                \"icon\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"image.jpg\"\n                                }\n                            },\n                            \"type\": \"object\"\n                        }\n                    }\n                }\n            },\n            \"CharacterUpdate\": {\n                \"required\": true,\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"properties\": {\n                                \"name\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"John Doe\"\n                                },\n                                \"birthday\": {\n                                    \"type\": \"integer\",\n                                    \"maximum\": 28,\n                                    \"minimum\": 1,\n                                    \"example\": 1\n                                },\n                                \"season_id\": {\n                                    \"type\": \"integer\",\n                                    \"maximum\": 4,\n                                    \"minimum\": 1,\n                                    \"example\": 1\n                                },\n                                \"gender\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"Female\"\n                                },\n                                \"occupation\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"Doctor\"\n                                },\n                                \"isRomanceable\": {\n                                    \"type\": \"integer\",\n                                    \"maximum\": 1,\n                                    \"minimum\": 0,\n                                    \"example\": 1\n                                },\n                                \"icon\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"image.jpg\"\n                                }\n                            },\n                            \"type\": \"object\"\n                        }\n                    }\n                }\n            },\n            \"FamilyCreate\": {\n                \"required\": true,\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"required\": [\n                                \"character_id\",\n                                \"familiar_id\",\n                                \"relationship\"\n                            ],\n                            \"properties\": {\n                                \"character_id\": {\n                                    \"type\": \"integer\",\n                                    \"example\": 1\n                                },\n                                \"familiar_id\": {\n                                    \"type\": \"integer\",\n                                    \"example\": 2\n                                },\n                                \"relationship\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"Mother\"\n                                }\n                            },\n                            \"type\": \"object\"\n                        }\n                    }\n                }\n            },\n            \"FamilyUpdate\": {\n                \"required\": true,\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"properties\": {\n                                \"character_id\": {\n                                    \"type\": \"integer\",\n                                    \"example\": 1\n                                },\n                                \"familiar_id\": {\n                                    \"type\": \"integer\",\n                                    \"example\": 2\n                                },\n                                \"relationship\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"Mother\"\n                                }\n                            },\n                            \"type\": \"object\"\n                        }\n                    }\n                }\n            },\n            \"FavListCreate\": {\n                \"required\": true,\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"required\": [\n                                \"character_id\",\n                                \"item_id\"\n                            ],\n                            \"properties\": {\n                                \"character_id\": {\n                                    \"type\": \"integer\",\n                                    \"example\": 1\n                                },\n                                \"item_id\": {\n                                    \"type\": \"integer\",\n                                    \"example\": 1\n                                }\n                            },\n                            \"type\": \"object\"\n                        }\n                    }\n                }\n            },\n            \"FavListUpdate\": {\n                \"required\": true,\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"required\": [\n                                \"character_id\",\n                                \"item_id\"\n                            ],\n                            \"properties\": {\n                                \"character_id\": {\n                                    \"type\": \"integer\",\n                                    \"example\": 1\n                                },\n                                \"item_id\": {\n                                    \"type\": \"integer\",\n                                    \"example\": 1\n                                }\n                            },\n                            \"type\": \"object\"\n                        }\n                    }\n                }\n            },\n            \"ItemUpdate\": {\n                \"required\": true,\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"properties\": {\n                                \"name\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"Sea Grapes\"\n                                },\n                                \"type_id\": {\n                                    \"type\": \"integer\",\n                                    \"example\": 1\n                                },\n                                \"icon\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"sea-grapes.png\"\n                                }\n                            },\n                            \"type\": \"object\"\n                        }\n                    }\n                }\n            },\n            \"ItemCreate\": {\n                \"required\": true,\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"required\": [\n                                \"name\",\n                                \"icon\"\n                            ],\n                            \"properties\": {\n                                \"name\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"Sea Grapes\"\n                                },\n                                \"type_id\": {\n                                    \"type\": \"integer\",\n                                    \"example\": 1\n                                },\n                                \"icon\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"sea-grapes.png\"\n                                }\n                            },\n                            \"type\": \"object\"\n                        }\n                    }\n                }\n            },\n            \"ProfileCreate\": {\n                \"required\": true,\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"required\": [\n                                \"farmer_name\",\n                                \"farm_name\",\n                                \"color\"\n                            ],\n                            \"properties\": {\n                                \"farmer_name\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"John Doe\"\n                                },\n                                \"farm_name\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"John's Farm\"\n                                },\n                                \"color\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"#000000\"\n                                },\n                                \"user_id\": {\n                                    \"type\": \"integer\",\n                                    \"example\": 1\n                                }\n                            },\n                            \"type\": \"object\"\n                        }\n                    }\n                }\n            },\n            \"ProfileUpdate\": {\n                \"required\": true,\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"properties\": {\n                                \"farmer_name\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"John Doe\"\n                                },\n                                \"farm_name\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"John's Farm\"\n                                },\n                                \"color\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"#000000\"\n                                }\n                            },\n                            \"type\": \"object\"\n                        }\n                    }\n                }\n            },\n            \"TaskUpdate\": {\n                \"required\": true,\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"properties\": {\n                                \"profile_id\": {\n                                    \"description\": \"The id of the profile\",\n                                    \"type\": \"integer\",\n                                    \"example\": 1\n                                },\n                                \"description\": {\n                                    \"description\": \"The description of the task\",\n                                    \"type\": \"string\",\n                                    \"example\": \"Kill the Night King\"\n                                },\n                                \"isCompleted\": {\n                                    \"description\": \"The status of the task\",\n                                    \"type\": \"integer\",\n                                    \"example\": 0\n                                },\n                                \"character_id\": {\n                                    \"description\": \"The id of the character\",\n                                    \"type\": \"integer\",\n                                    \"example\": 1\n                                },\n                                \"item_id\": {\n                                    \"description\": \"The id of the item\",\n                                    \"type\": \"integer\",\n                                    \"example\": 1\n                                }\n                            },\n                            \"type\": \"object\"\n                        }\n                    }\n                }\n            },\n            \"TaskCreate\": {\n                \"required\": true,\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"required\": [\n                                \"profile_id\",\n                                \"description\",\n                                \"isCompleted\"\n                            ],\n                            \"properties\": {\n                                \"profile_id\": {\n                                    \"description\": \"The id of the profile\",\n                                    \"type\": \"integer\",\n                                    \"example\": 1\n                                },\n                                \"description\": {\n                                    \"description\": \"The description of the task\",\n                                    \"type\": \"string\",\n                                    \"example\": \"Kill the Night King\"\n                                },\n                                \"isCompleted\": {\n                                    \"description\": \"The status of the task\",\n                                    \"type\": \"integer\",\n                                    \"example\": 0\n                                },\n                                \"character_id\": {\n                                    \"description\": \"The id of the character\",\n                                    \"type\": \"integer\",\n                                    \"example\": 1\n                                },\n                                \"item_id\": {\n                                    \"description\": \"The id of the item\",\n                                    \"type\": \"integer\",\n                                    \"example\": 1\n                                }\n                            },\n                            \"type\": \"object\"\n                        }\n                    }\n                }\n            },\n            \"Type\": {\n                \"required\": true,\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"$ref\": \"#/components/schemas/Type\"\n                        }\n                    }\n                }\n            },\n            \"UserLogin\": {\n                \"required\": true,\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"properties\": {\n                                \"email\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"email\",\n                                    \"example\": \"example@email.es\"\n                                },\n                                \"password\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"password\",\n                                    \"example\": \"password123\"\n                                }\n                            },\n                            \"type\": \"object\"\n                        }\n                    }\n                }\n            },\n            \"UserRegister\": {\n                \"required\": true,\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"properties\": {\n                                \"username\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"john_doe\"\n                                },\n                                \"email\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"email\",\n                                    \"example\": \"example@email.es\"\n                                },\n                                \"password\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"password\",\n                                    \"example\": \"password123\"\n                                }\n                            },\n                            \"type\": \"object\"\n                        }\n                    }\n                }\n            }\n        },\n        \"securitySchemes\": {\n            \"sanctum\": {\n                \"type\": \"http\",\n                \"scheme\": \"bearer\"\n            }\n        }\n    },\n    \"tags\": [\n        {\n            \"name\": \"Characters\",\n            \"description\": \"Endpoints for characters\"\n        },\n        {\n            \"name\": \"Families\",\n            \"description\": \"Endpoints for families\"\n        },\n        {\n            \"name\": \"Favorite Lists\",\n            \"description\": \"Endpoints for favorite lists\"\n        },\n        {\n            \"name\": \"Items\",\n            \"description\": \"Endpoints for items\"\n        },\n        {\n            \"name\": \"Profiles\",\n            \"description\": \"Endpoints for profiles\"\n        },\n        {\n            \"name\": \"Seasons\",\n            \"description\": \"Endpoints for seasons\"\n        },\n        {\n            \"name\": \"Task\",\n            \"description\": \"Endpoints of tasks\"\n        },\n        {\n            \"name\": \"Types\",\n            \"description\": \"Endpoints of types\"\n        },\n        {\n            \"name\": \"Users\",\n            \"description\": \"Endpoints for users\"\n        }\n    ]\n}","contentType":"yaml","_type":"api_spec"},{"_id":"env_5c51a280b2f84799b3eb1ceeef579b50","parentId":"env_16cf713bdd864950ef8be91cacc146d5eac0cf51","modified":1686606534344,"created":1686333521126,"name":"Local","data":{"base_url":"localhost/api","id":1,"bearerToken":"4|49QtoOQ00qq441jQUeiRygNycgqrtuRmXx4i8BMP"},"dataPropertyOrder":{"&":["base_url","id","bearerToken"]},"color":"#53cac2","isPrivate":false,"metaSortKey":1686333521126,"_type":"environment"},{"_id":"env_32d2a12531044da2a9b2261a1892df4a","parentId":"env_16cf713bdd864950ef8be91cacc146d5eac0cf51","modified":1686606323913,"created":1686606323913,"name":"New Environment","data":{},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1686606323913,"_type":"environment"}]}